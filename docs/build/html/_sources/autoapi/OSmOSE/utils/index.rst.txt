:py:mod:`OSmOSE.utils`
======================

.. py:module:: OSmOSE.utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   OSmOSE.utils.display_folder_storage_infos
   OSmOSE.utils.list_not_built_datasets
   OSmOSE.utils.read_config
   OSmOSE.utils.convert
   OSmOSE.utils.read_header
   OSmOSE.utils.safe_read
   OSmOSE.utils.check_n_files
   OSmOSE.utils.make_path
   OSmOSE.utils.set_umask



.. py:function:: display_folder_storage_infos(dir_path: str) -> None


.. py:function:: list_not_built_datasets(datasets_folder_path: str) -> None

   
   Prints the available datasets that have not been built by the `Dataset.build()` function.
















   ..
       !! processed by numpydoc !!

.. py:function:: read_config(raw_config: Union[str, dict, OSmOSE.config.Path]) -> NamedTuple

   
   Read the given configuration file or dict and converts it to a namedtuple. Only TOML and JSON formats are accepted for now.
















   ..
       !! processed by numpydoc !!

.. py:function:: convert(dictionary: dict) -> NamedTuple

   
   Convert a dictionary in a Named Tuple
















   ..
       !! processed by numpydoc !!

.. py:function:: read_header(file: str) -> Tuple[int, float, int, int]

   
   Read the first bytes of a wav file and extract its characteristics.
   At the very least, only the first 44 bytes are read. If the `data` chunk is not right after the header chunk,
   the subsequent chunks will be read until the `data` chunk is found. If there is no `data` chunk, all the file will be read.
   Parameter
   ---------
   file: str
       The absolute path of the wav file whose header will be read.
   :returns: * **samplerate** (`int`) -- The number of samples in one frame.
             * **frames** (`float`) -- The number of frames, corresponding to the file duration in seconds.
             * **channels** (`int`) -- The number of audio channels.
             * **sampwidth** (`int`) -- The sample width.

   .. note::

      When there is no `data` chunk, the `frames` value will fall back on the size written in the header. This can be incorrect,
      if the file has been corrupted or the writing process has been interrupted before completion.















   ..
       !! processed by numpydoc !!

.. py:function:: safe_read(file_path: str, *, nan: float = 0.0, posinf: any = None, neginf: any = None) -> Tuple[numpy.ndarray, int]

   
   Open a file using Soundfile and clean up the data to be used safely
   Currently, only checks for `NaN`, `inf` and `-inf` presence. The default behavior is the same as `np.nan_to_num`:
   `NaNs` are transformed into 0.0, `inf` and `-inf` are transformed into the maximum and minimum values of their dtype.
   :param file_path: The path to the audio file to safely read.
   :type file_path: `str`
   :param nan: The value that will replace `NaNs`. Default is 0.0
   :type nan: `float`, optional, keyword_only
   :param posinf: The value that will replace `inf`. Default behavior is the maximum value of the data type.
   :type posinf: `any`, optional, keyword_only
   :param neginf: The value that will replace `-inf`. Default behavior is the minimum value of the data type.
   :type neginf: `any`, optional, keyword_only

   :returns: * **audio_data** (`NDArray`) -- The cleaned audio data as a numpy array.
             * **sample_rate** (`int`) -- The sample rate of the data.















   ..
       !! processed by numpydoc !!

.. py:function:: check_n_files(file_list: list, n: int, *, output_path: str = None, threshold_percent: float = 0.1, auto_normalization: bool = False) -> bool

   
   Check n files at random for anomalies and may normalize them.
   Currently, check if the data for wav in PCM float format are between -1.0 and 1.0. If the number of files that
   fail the test is higher than the threshold (which is 10% of n by default, with an absolute minimum of 1), all the
   dataset will be normalized and written in another file.
   :param file_list: The list of files to be evaluated. It must be equal or longer than n.
   :type file_list: `list`
   :param n: The number of files to evaluate. To lower resource consumption, it is advised to check only a subset of the dataset.
             10 files taken at random should provide an acceptable idea of the whole dataset.
   :type n: `int`
   :param output_path: The path to the folder where the normalized files will be written. If auto_normalization is set to True, then
                       it must have a value.
   :type output_path: `str`, optional, keyword-only
   :param threshold_percent: The maximum acceptable percentage of evaluated files that can contain anomalies. Understands fraction and whole numbers. Default is 0.1, or 10%
   :type threshold_percent: `float`, optional, keyword-only
   :param auto_normalization: Whether the normalization should proceed automatically or not if the threshold is reached. As a safeguard, the default is False.
   :type auto_normalization: `bool`, optional, keyword_only

   :returns: **normalized** -- Indicates whether or not the dataset has been normalized.
   :rtype: `bool`















   ..
       !! processed by numpydoc !!

.. py:function:: make_path(path: OSmOSE.config.Path, *, mode=DPDEFAULT) -> OSmOSE.config.Path

   
   Create a path folder by folder with correct permissions.

   If a folder in the path already exists, it will not be modified (even if the specified mode differs).

   :param path: The complete path to create.
   :type path: `Path`
   :param mode: The permission code of the complete path. The default is 0o755, meaning the owner has all permissions over the files of the path,
                and the owner group and others only have read and execute rights, but not writing.
   :type mode: `int`, optional, keyword-only















   ..
       !! processed by numpydoc !!

.. py:function:: set_umask()


