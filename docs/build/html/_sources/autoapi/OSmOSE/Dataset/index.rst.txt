:py:mod:`OSmOSE.Dataset`
========================

.. py:module:: OSmOSE.Dataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   OSmOSE.Dataset.Dataset




.. py:class:: Dataset(dataset_path: str, *, gps_coordinates: Union[str, list, Tuple] = None, owner_group: str = None, original_folder: str = None)

   
   Super class used to create dataset compatible with the rest of the package.

   A dataset is primarily identified by the audio files located in a folder whose name is the dataset name.
   The files can be anywhere in this folder, but all audio files will be moved to the `data/audio/original`
   subfolder when the build() method is called.
   There should be a `timestamp.csv` file, which includes the name of the file and the associated timestamp,
   in the `%Y-%m-%dT%H:%M:%S.%fZ` strftime format.

   This file can be created using the `OSmOSE.write_timestamp` function.

   :param dataset_path: The absolute path to the dataset folder. The last folder in the path will be considered as the name of the dataset.
   :type dataset_path: `str`
   :param gps_coordinates: The GPS coordinates of the listening location. If it is of type `str`, it must be the name of a csv file located in `data/auxiliary`,
                           otherwise a list or a tuple with the first element being the latitude coordinates and second the longitude coordinates.
   :type gps_coordinates: `str` or `list` or `Tuple`, optional, keyword-only
   :param owner_group: The name of the group using the OsmOSE package. All files created using this dataset will be accessible by the osmose group.
                       Will not work on Windows.
   :type owner_group: `str`, optional, keyword-only
   :param original_folder: The path to the folder containing the original audio files. It can be set right away, passed in the build() function or automatically detected.
   :type original_folder: `str`, optional, keyword-only

   .. rubric:: Example

   >>> from pathlib import Path
   >>> from OSmOSE import Dataset
   >>> dataset = Dataset(Path("home","user","my_dataset"), coordinates = [49.2, -5], owner_group = "gosmose")















   ..
       !! processed by numpydoc !!
   .. py:property:: name

      
      The Dataset name. It is readonly.

      :type: str















      ..
          !! processed by numpydoc !!

   .. py:property:: path

      
      The Dataset path. It is readonly.

      :type: Path















      ..
          !! processed by numpydoc !!

   .. py:property:: original_folder

      
      The folder containing the original audio file.

      :type: Path















      ..
          !! processed by numpydoc !!

   .. py:property:: gps_coordinates
      :type: Union[Tuple[float, float], Tuple[Tuple[float, float], Tuple[float, float]]]

      
      The GPS coordinates of the listening location. First element is latitude, second is longitude.

      GPS coordinates are used to localize the dataset and required for some utilities, like the
      weather and environment utility.















      ..
          !! processed by numpydoc !!

   .. py:property:: owner_group

      
      The Unix group able to interact with the dataset.

      :type: str















      ..
          !! processed by numpydoc !!

   .. py:property:: is_built

      
      Checks if self.path/data/audio contains at least one folder and none called "original".
















      ..
          !! processed by numpydoc !!

   .. py:method:: build(*, original_folder: str = None, owner_group: str = None, date_template: str = None, bare_check: bool = False, auto_normalization: bool = False, force_upload: bool = False) -> OSmOSE.config.Path

      
      Set up the architecture of the dataset.

      The following operations will be performed on the dataset. None of them are destructive:
          - open and read the header of audio files located in `raw/audio/original/`.
          - rename files containing illegal characters.
          - generate some stastics regarding the files and dataset durations.
          - write the raw/metadata.csv file.
          - Identify and record files with anomalies (short duration, unreadable header...).
          - Set the permission of the dataset to the osmose group.

      :param original_folder: The name of the folder containing the original audio file. It is named "original" by convention.
                              If none is passed, the program expects to find either only one folder in the dataset audio folder, or
                              a folder named `original`
      :type original_folder: `str`, optional, keyword-only
      :param owner_group: The name of the group using the osmose dataset. It will have all permissions over the dataset.
      :type owner_group: `str`, optional, keyword_only
      :param date_template: the date template in strftime format. For example, `2017/02/24` has the template `%Y/%m/%d`.
                            It is used to generate automatically the timestamp.csv file. Alternatively, you can call the script to create the timestamp file first.
                            If no template is provided, will assume that the file already exists. In future versions, the template will be guessed automatically.
                            For more information on strftime template, see https://strftime.org/.
      :type date_template: `str`, optional, keyword_only
      :param bare_check: Only do the checks and build steps that requires low resource usage. If you build the dataset on a login node or
                         if you are sure it is already good to use, set to True. Otherwise, it should be inside a job. Default is False.
      :type bare_check: `bool`, optional, keyword_only
      :param auto_normalization: If true, automatically normalize audio files if the data would cause issues downstream. The default is False.
      :type auto_normalization: `bool`, optional, keyword_only
      :param force_upload: If true, ignore the file anomalies and build the dataset anyway. The default is False.
      :type force_upload: `bool`, optional, keyword_only

      :returns: **dataset** -- The dataset object.
      :rtype: `Dataset`

      .. rubric:: Example

      >>> from pathlib import Path
      >>> from OSmOSE import Dataset
      >>> dataset = Dataset(Path("home","user","my_dataset"))
      >>> dataset.build()

      DONE ! your dataset is on OSmOSE platform !















      ..
          !! processed by numpydoc !!

   .. py:method:: delete_abnormal_files() -> None

      
      Delete all files with abnormal durations in the dataset, and rewrite the timestamps.csv file to reflect the changes.
      If no abnormal file is detected, then it does nothing.
















      ..
          !! processed by numpydoc !!


